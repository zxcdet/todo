import { Component, OnInit } from '@angular/core';import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';import { TodoTaskService } from '../services/todoTask.service';import { TodoTaskInterface } from '../../types/todoTask.interface';import { TodoTaskRequestInterface } from '../../types/todoTaskRequest.interface';import { ActivatedRoute } from '@angular/router';@Component({  selector: 'app-todo-task',  templateUrl: './todoTask.component.html',  styleUrls: ['./todoTask.component.css']})export class TodoTaskComponent implements OnInit {  public todo: TodoTaskInterface[] = [];  public todoId: any;  public done: TodoTaskInterface[] = [];  private id: string;  constructor(    private todoTaskService: TodoTaskService,    private route: ActivatedRoute  ) {  }  ngOnInit(): void {    this.route.params.subscribe((params) => this.id = params.id)  }  public drop(event: CdkDragDrop<TodoTaskInterface[]>) {    if (event.previousContainer === event.container) {      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);    } else {      transferArrayItem(        event.previousContainer.data,        event.container.data,        event.previousIndex,        event.currentIndex,      );    }  };  public onAddCard(name: TodoTaskRequestInterface) {    this.todoTaskService.create(name)      .subscribe((todo) => {          this.todo.push(todo);        }      )  }  public onAddCardDone(name: TodoTaskRequestInterface) {    this.todoTaskService.create(name)      .subscribe((todo) => {          this.done.push(todo);        }      )  }  public deleteTodo(id: TodoTaskRequestInterface) {    this.todoTaskService.deleteTodoTask(id).subscribe(() => {      const todo = this.todo.find((todo) => todo._id === id);      const inedex = this.todo.indexOf(todo);      delete this.todo[inedex];    });  };  public deleteDone(id: TodoTaskRequestInterface) {    this.todoTaskService.deleteTodoTask(id).subscribe(() => {      const todo = this.done.find((todo) => todo._id === id);      const inedex = this.done.indexOf(todo);      delete this.done[inedex];    });  };}